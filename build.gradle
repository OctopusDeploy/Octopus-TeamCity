
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id 'com.diffplug.spotless' version '5.9.0'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'com.github.hierynomus.license' version '0.15.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'me.champeau.gradle.jmh' version '0.5.0' apply false
  id 'net.ltgt.errorprone' version '1.3.0'
  id 'maven-publish'
  id 'java'
  id 'distribution'
}

group = "com.octopus.teamcity"
defaultTasks 'build', 'checkLicenses', 'javadoc'

ext {
  teamcity_version = 10.0
  teamcity_distribution = "C:\\TeamCity"
  build_timestamp_format = "yyyyMMddHHmm"
}

def buildAliases = ['dev': [
    //'spotlessApply',
    'build',
    'checkLicenses',
    'javadoc'
  ]]



allprojects {
  apply plugin: 'java-library'
  apply plugin: 'java'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'net.ltgt.errorprone'
  apply from: "${rootDir}/gradle/versions.gradle"
  apply from: "${rootDir}/gradle/check-licenses.gradle"

  // Provided configuration allows compile-time only dependences to NOT
  // be included in the final distributions.
  configurations {
    provided
  }

  sourceSets {
    main { compileClasspath += configurations.provided }
  }

  version = rootProject.version

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  sourceCompatibility = 8
  targetCompatibility = 8

  repositories {
    mavenCentral()
    maven { url "https://download.jetbrains.com/teamcity-repository" }
    maven { url "https://packages.jetbrains.team/maven/p/teamcity-rest-client/teamcity-rest-client" }
  }

  dependencies { errorprone "com.google.errorprone:error_prone_core" }
  tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs.add("-Xbootclasspath/p:${configurations.javac.asPath}" })
}
  
// TODO(tmm): Re-enable spotless ASAP
//  apply plugin: 'com.diffplug.spotless'
//  spotless {
//    java {
//      // This path needs to be relative to each project
//      target fileTree('.') {
//        include '**/src/*/java/**/*.java'
//        exclude '**/.gradle/**'
//      }
//      removeUnusedImports()
//      googleJavaFormat('1.7')
//      importOrder 'org.hyperledger', 'java', ''
//      trimTrailingWhitespace()
//      endWithNewline()
//    }
//
//    groovyGradle {
//      target '*.gradle'
//      greclipse().configFile(rootProject.file('gradle/formatter.properties'))
//      endWithNewline()
//    }
//
//    // Below this line are currently only license header tasks
//    format 'groovy', { target '**/src/*/grovy/**/*.groovy' }
//  }

  tasks.withType(JavaCompile) {
    options.compilerArgs += [
      '-Xlint:unchecked',
      '-Xlint:cast',
      '-Xlint:rawtypes',
      '-Xlint:overloads',
      '-Xlint:divzero',
      '-Xlint:finally',
      '-Xlint:static',
      //'-Werror', // TODO(tmm): Readd this ASAP
    ]

    options.errorprone {
      excludedPaths = '.*generated/*.*'

      // Our equals need to be symmetric, this checker doesn't respect that.
      check('EqualsGetClass', CheckSeverity.OFF)
      // We like to use futures with no return values.
      check('FutureReturnValueIgnored', CheckSeverity.OFF)
      // We use the JSR-305 annotations instead of the Google annotations.
      check('ImmutableEnumChecker', CheckSeverity.OFF)
      // This is a style check instead of an error-prone pattern.
      check('UnnecessaryParentheses', CheckSeverity.OFF)

      // This check is broken in Java 12.  See https://github.com/google/error-prone/issues/1257
      if (JavaVersion.current() == JavaVersion.VERSION_12) {
        check('Finally', CheckSeverity.OFF)
      }
      // This check is broken after Java 12.  See https://github.com/google/error-prone/issues/1352
      if (JavaVersion.current() > JavaVersion.VERSION_12) {
        check('TypeParameterUnusedInFormals', CheckSeverity.OFF)
      }

      check('FieldCanBeFinal', CheckSeverity.WARN)
      check('InsecureCryptoUsage', CheckSeverity.WARN)
      check('WildcardImport', CheckSeverity.WARN)
    }

    options.encoding = 'UTF-8'
  }
}

apply plugin: "distribution"

//This is required to override default behaviour of distTar to create all files
//in a parent directory (rather than flattened).
distZip {
  archiveName = "Octopus.TeamCity.zip"
  eachFile { file ->
    String path = file.relativePath
    file.setPath(path.substring(path.indexOf("/")+1,path.length()))
  }
}

distributions {
  main {
    contents {
      from file("teamcity-plugin.xml"), {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens:[version: rootProject.version])
      }
      into('agent/') {
        from tasks.findByPath(":octopus-agent:distZip").outputs.files.singleFile
      }
      into('server/') {
        from tasks.findByPath(":octopus-server:installDist").outputs.files
      }
    }
  }
}

//
//task checkMavenCoordinateCollisions {
//    doLast {
//        def coordinates = [:]
//        getAllprojects().forEach {
//            if (it.properties.containsKey('publishing') && it.jar?.enabled) {
//                def coordinate = it.publishing?.publications[0].coordinates
//                if (coordinates.containsKey(coordinate)) {
//                    throw new GradleException("Duplicate maven coordinates detected, ${coordinate} is used by " +
//                            "both ${coordinates[coordinate]} and ${it.path}.\n" +
//                            "Please add a `publishing` script block to one or both subprojects.")
//                }
//                coordinates[coordinate] = it.path
//            }
//        }
//    }
//}

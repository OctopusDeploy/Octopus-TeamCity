name: Build, Test, Package and Push

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events
  push:
    branches:
      - '**'
  release:
    types: [published]

  schedule:
    # Daily 5am australian/brisbane time (7pm UTC)
    - cron: '0 19 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    name: "Build and Package"
    runs-on: ubuntu-latest
    # conditionally skip build on PR merge of release-please, because the release creation is going to trigger the real build
    if: ${{ github.ref_name != 'main' || github.event.head_commit.author.username != 'team-integrations-fnm-bot' }}
    env:
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_APIKEY }}
      OCTOPUS_HOST: ${{ secrets.OCTOPUS_SERVER }}
      OCTOPUS_SPACE: Integrations

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'adopt'

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: '5.x'

    - name: Call GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13

    - name: Determine Version
      id: git-version
      run: |
        if [ "${{ github.event_name }}" == "schedule" ]
        then
          echo "::set-output name=nuGetVersion::${GITVERSION_MAJORMINORPATCH}-nightly-${{ github.run_number }}"
          echo "Version: ${GITVERSION_MAJORMINORPATCH}-nightly-${{ github.run_number }}"
        else
          echo "::set-output name=nuGetVersion::${GITVERSION_FULLSEMVER}"
          echo "Version: ${GITVERSION_FULLSEMVER}"
        fi

    - name: Build with gradle
      run: ./gradlew build test -Pversion=${{ steps.git-version.outputs.nugetVersion }}

    - name: Create Plugin Zip Deployment
      id: create-package
      run: |
        ./gradlew distZip -Pversion=${{ steps.git-version.outputs.nugetVersion }}
        PACKAGE_NAME=`./gradlew -q packageName  -Pversion=${{ steps.git-version.outputs.nugetVersion }}`
        echo "::set-output name=package-created::$PACKAGE_NAME"

    - uses: actions/upload-artifact@v3
      with:
        name: Octopus.TeamCity.${{ steps.git-version.outputs.nugetVersion }}
        path: '${{ steps.create-package.outputs.package-created }}'

    - name: Execute end-2-end tests
      run: ./gradlew e2etest -Pversion=${{ steps.git-version.outputs.nugetVersion }}
      env:
        OCTOPUS_LICENSE: ${{ secrets.OCTOPUS_LICENSE }}
        OCTOPUS_SDK_AT_USE_EXISTING_SERVER: false
     
    - name: Push build information 🐙
      uses: OctopusDeploy/push-build-information-action@v1
      with:
        packages: 'Octopus.TeamCity'
        version: ${{ steps.git-version.outputs.nugetVersion }}

    - name: Install Octopus CLI 🐙
      uses: OctopusDeploy/install-octopus-cli-action@v1

    - name: Push a package to Octopus Deploy 🐙
      uses: OctopusDeploy/push-package-action@v2
      with:
        packages: '${{ steps.create-package.outputs.package-created }}'

    - name: Fetch Release Notes
      id: fetch-release-notes
      if: github.event_name == 'release'
      run: |
        echo "::debug::${{github.event_name}}"
        OUTPUT_FILE="release_notes.txt"
        jq --raw-output '.release.body' ${{ github.event_path }} | sed 's#\r#  #g' > $OUTPUT_FILE
        echo "::set-output name=release-note-file::$OUTPUT_FILE"

    - name: Create a release in Octopus Deploy 🐙
      uses: OctopusDeploy/create-release-action@v2
      with:
        project: 'TeamCity Plugin'
        package_version: ${{ steps.git-version.outputs.nugetVersion }}
        release_notes_file: ${{ steps.fetch-release-notes.outputs.release-note-file }}

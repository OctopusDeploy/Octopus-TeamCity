dependencies {

  testImplementation(project(':octopus-common'))

  testImplementation 'com.octopus:octopus-sdk'
  testImplementation 'com.octopus:test-support'

  testImplementation 'com.google.code.gson:gson'

  testImplementation 'com.google.guava:guava'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.testcontainers:testcontainers'
  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'net.lingala.zip4j:zip4j'

  testImplementation 'org.apache.logging.log4j:log4j-api'
  testImplementation 'org.apache.logging.log4j:log4j-core'
  testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl'
  testImplementation 'org.jetbrains.teamcity:teamcity-rest-client'
  testImplementation 'org.mock-server:mockserver-netty'
}

test.enabled = false

task e2eTest(type: Test) {

  dependsOn rootProject.distZip
  mustRunAfter rootProject.subprojects*.test
  environment "TEAMCITY_PLUGIN_DIST", rootProject.distZip.outputs.files.singleFile
  environment "OCTOPUS_SDK_AT_USE_EXISTING_SERVER", "false"

  description = 'Runs the Octopus Teamcity end-2-end tests.'
  group = 'verification'
  useJUnitPlatform()
  outputs.upToDateWhen { false }


  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }

  // Until test execution exceed startup costs.
  maxParallelForks = 1
}
